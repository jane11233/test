basic command:
mac diff -u filename1 filename2
windows fc filename1 filename2

git log --stat: show the changes of all history commmit, type q to exit, type f to continue

git --version: to check version of the git installed

https://git-scm.com/downloads

git clone followed by a space and the repository URL: download a repository not only file but also the whole history

git config --global color.ui auto

git diff followed by two commit ID: to see the diff between two commit and type q to quit

git diff (followed by no argument): used to compare content in the work directory and stage area

git diff --staged(followed by no argument): used to compare the content in the stage area to the repository

git checkout followed by commit ID:mainly used to go back to one previous verison of your code or go back( to go to any commit point you want go

ls -a: to show the hidden file or directory

git init: to init a git repository

git status: show what files needs to take action

git add: use to add files from your work directory to stage area, these can helpto determine which files should be committed together

git reset: used to remove files in stage area

git commit -m "comment msg": used to commit things to the repository and with a msg

git checkout master: used to go back to the latest commit

git reset --hard: discard the changes in work directory and stage area

git branch (with no argument): show the current brach

git branch brachname: create a branch name "branchname", and you can use git checkout brachname switch to the new branch

git log --graph --oneline master branchname: used to see the log of master and serveral branches

git checkout -b new_branch_name: euqls to git branch new_brach_name and then git checkout new_branch_name

git merge master branch_name: used to merge master and branch_name

git show: used to show the difference between a specific commit and its parent commit without knowning the parent commit id

git branch -d branch_name: confused about this

git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch; git merge will also include the currently checked-out branch in the merged version. So if you have branch1 checked out, and you run git merge branch2 branch3, the merged version will combine branch1 as well as branch2 and branch3

rm -rf /yourpath

if come across a confliction when you merge things: open the files and delete the part conflict or discuss with other person. then commit the resolved version

git push:

git pull:

git remote: to see all the remote git

git remote add remote_name repostory link: ex. git remote add origin(name for local) https://github.com/jane11233/test.git

git remote -v: to see it in more details

git pull origin master: to update information from remote to local
